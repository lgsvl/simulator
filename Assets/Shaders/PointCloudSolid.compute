/**
 * Copyright (c) 2019 LG Electronics, Inc.
 *
 * This software contains code licensed as described in LICENSE.
 *
 */

/*
 * NOTE: Temporary exclude this shader from compilation
 *       for OpenGL based platform (Linux) due to weird
 *       compilation issues. Let's fix that later.
 */

#include "UnityCG.cginc"
#pragma only_renderers d3d11 vulkan metal

#pragma kernel SetupClear

RWTexture2D<float4> _SetupClearPosition;
RWTexture2D<float4> _SetupClearColor;

[numthreads(8, 8, 1)]
void SetupClear(uint3 id : SV_DispatchThreadID) 
{
    _SetupClearPosition[id.xy] = float4(0, 0, 0, 0);
    _SetupClearColor[id.xy] = float4(0, 0, 0, 0);
}


#pragma kernel SetupCopy

RWTexture2D<float4> _SetupCopyInput;
RWTexture2D<float> _SetupCopyInputPos;
RWTexture2D<float4> _SetupCopyPosition;
RWTexture2D<float4> _SetupCopyColor;

float _FarPlane;

float4x4 _SetupCopyInverseProj;

[numthreads(8, 8, 1)]
void SetupCopy(uint3 id : SV_DispatchThreadID)
{
    uint w, h;
    _SetupCopyInput.GetDimensions(w, h);

    uint2 input = min(id.xy, uint2(w - 1, h - 1));

    float4 color = _SetupCopyInput.Load(input);
    float pos = _SetupCopyInputPos.Load(input);

    float2 xy = float2(float(input.x) / (w - 1), float(input.y) / (h - 1));
    float4 viewPos = mul(_SetupCopyInverseProj, float4(2 * xy - 1, pos, 1));
    viewPos /= viewPos.w;

    viewPos.z = -viewPos.z;
    if (color.w == 0 && id.x < w && id.y < h)
    {
        viewPos.z = _FarPlane;
    }

    color.w = 1;
    float weight = min(color.w, 1);
    float3 weightedColor = color.rgb * weight;

    _SetupCopyPosition[id.xy] = float4(viewPos.xyz, _FarPlane - viewPos.z);
    _SetupCopyColor[id.xy] = float4(weightedColor, weight);
}


#pragma kernel Downsample

RWTexture2D<float4> _DownsampleInput;
RWTexture2D<float4> _DownsampleOutput;

int2 _DownsamplePosMax;

[numthreads(8, 8, 1)]
void Downsample(uint3 id : SV_DispatchThreadID)
{
    uint2 pos = min(id.xy*2, _DownsamplePosMax);

    float4 a = _DownsampleInput.Load(pos + uint2(0, 0));
    float4 b = _DownsampleInput.Load(pos + uint2(0, 1));
    float4 c = _DownsampleInput.Load(pos + uint2(1, 0));
    float4 d = _DownsampleInput.Load(pos + uint2(1, 1));

    float4 r;
    if (a.z < b.z && a.z < c.z && a.z < d.z)
    {
        r = a;
    }
    else if (b.z < a.z && b.z < c.z && b.z < d.z)
    {
        r = b;
    }
    else if (c.z < a.z && c.z < b.z && c.z < d.z)
    {
        r = c;
    }
    else
    {
        r = d;
    }
    _DownsampleOutput[id.xy] = r;
}


#pragma kernel RemoveHidden
#pragma kernel RemoveHiddenDebug DEBUG_CASCADES

Texture2D<float4> _RemoveHiddenPosition;
RWTexture2D<float4> _RemoveHiddenColor;
RWTexture2D<float4> _RemoveHiddenDepthBuffer;

float _RemoveHiddenCascadesOffset;
float _RemoveHiddenCascadesSize;
int _RemoveHiddenLevel = 0;
int _RemoveHiddenLevelCount;

float GetOcclusion(float4 x, float4 y)
{
    return 1 - dot(normalize(y.xyz - x.xyz), -normalize(y.xyz));
}

float GetMinOcclusion(float4 pix, uint2 base, int2 delta, int maxlevel)
{
    uint w, h;
    _RemoveHiddenPosition.GetDimensions(w, h);

    float4 other = _RemoveHiddenPosition.Load(int3(base + delta, 0));
    float o = GetOcclusion(pix, other);

    for (int level = 1; level <= maxlevel; level++)
    {
        int2 pos = ((int2)base >> level) + delta;
        pos = clamp(pos, int2(0, 0), int2(w-1, h-1));
        other = _RemoveHiddenPosition.Load(int3(pos, level));
        o = min(o, GetOcclusion(pix, other));
    }

    return o;
}

void RemoveHiddenImpl(uint3 id)
{
    uint w, h;
    _RemoveHiddenPosition.GetDimensions(w, h);

    float4 pix = _RemoveHiddenPosition.Load(int3(id.xy, 0));
    float4 col = _RemoveHiddenColor.Load(id.xy);

    int maxlevel;
    if (_RemoveHiddenLevel == 0)
    {
        int depthLevel = 4;
        float z = _RemoveHiddenPosition.Load(int3(id.xy >> depthLevel, depthLevel)).z;
        maxlevel = (int)(log2(_RemoveHiddenCascadesOffset / z) / _RemoveHiddenCascadesSize);
    }
    else
    {
        maxlevel = _RemoveHiddenLevel;
    }
    maxlevel = clamp(maxlevel, 0, _RemoveHiddenLevelCount - 1);

    float avg = 0;
    avg += GetMinOcclusion(pix, id.xy, int2(-1, -1), maxlevel);
    avg += GetMinOcclusion(pix, id.xy, int2(0, -1), maxlevel);
    avg += GetMinOcclusion(pix, id.xy, int2(1, -1), maxlevel);
    avg += GetMinOcclusion(pix, id.xy, int2(-1, 0), maxlevel);
    avg += GetMinOcclusion(pix, id.xy, int2(1, 0), maxlevel);
    avg += GetMinOcclusion(pix, id.xy, int2(-1, 1), maxlevel);
    avg += GetMinOcclusion(pix, id.xy, int2(0, 1), maxlevel);
    avg += GetMinOcclusion(pix, id.xy, int2(1, 1), maxlevel);
    avg /= 8;

    if (avg < 0.1f)
    {
        col = float4(1,1,1,0);
        _RemoveHiddenColor[id.xy] = float4(0, 0, 0, 0);
        pix.w = 0;
        
    }
#if DEBUG_CASCADES
    else
    {
        float ratio = (float) maxlevel / (_RemoveHiddenLevelCount - 1);
        float3 debugColor = lerp(float3(0, 0, 1), float3(0, 1, 0), ratio);
        col.rgb = lerp(col.rgb * debugColor, debugColor, 0.5);
        _RemoveHiddenColor[id.xy] = col;
    }
#endif

    _RemoveHiddenDepthBuffer[id.xy] = pix;
}

[numthreads(8, 8, 1)]
void RemoveHidden(uint3 id : SV_DispatchThreadID)
{
    RemoveHiddenImpl(id);
}

[numthreads(8, 8, 1)]
void RemoveHiddenDebug(uint3 id : SV_DispatchThreadID)
{
    RemoveHiddenImpl(id);
}


#pragma kernel ApplyPreviousFrame

Texture2D<float4> _PrevColorSaved;
Texture2D<float4> _PrevPosSaved;
RWTexture2D<float4> _PrevColorCurrent;
RWTexture2D<float4> _PrevPosCurrent;

#ifdef SHADER_API_VULKAN
Texture2D<float4> _PrevColorCurrentIn;
Texture2D<float4> _PrevPosCurrentIn;
#endif

float4x4 _PrevToCurrentMatrix;
float4x4 _ProjMatrix;
float _FramePersistence;

[numthreads(8, 8, 1)]
void ApplyPreviousFrame(uint3 id : SV_DispatchThreadID)
{
    int w, h;
    _PrevColorSaved.GetDimensions(w, h);

    int3 input = int3(min(id.xy, uint2(w - 1, h - 1)), 0);

    float4 cameraPos = _PrevPosSaved.Load(input);
    // W coordinate is normalized to 1, but channel was used to store something else
    cameraPos.w = 1;
    cameraPos.z = -cameraPos.z;
    float4 newCameraPos = mul(_PrevToCurrentMatrix, cameraPos);
    newCameraPos.xy /= newCameraPos.w;

    float4 prevScreenPos = mul(_ProjMatrix, newCameraPos);
    prevScreenPos /= prevScreenPos.w;
    prevScreenPos.xy = (prevScreenPos.xy + 1) * 0.5;

#if UNITY_UV_STARTS_AT_TOP
    prevScreenPos.y = 1 - prevScreenPos.y;
#endif

    int2 newPos = round(float2(prevScreenPos.x * (w - 1), prevScreenPos.y * (h - 1)));
    #ifdef SHADER_API_VULKAN
        int3 newPosFull = int3(newPos, 0);
        float4 currCameraPos = _PrevPosCurrentIn.Load(newPosFull);
    #else
        float4 currCameraPos = _PrevPosCurrent.Load(newPos);
    #endif

    if (newPos.x >= 0 && newPos.y >= 0 && newPos.x < w && newPos.y < h)
    {
        float4 prevCol = _PrevColorSaved.Load(input);
        float reducedWeight = max(0, prevCol.w - _FramePersistence);

        #ifdef SHADER_API_VULKAN
            float4 currCol = _PrevColorCurrentIn.Load(newPosFull);
        #else
            float4 currCol = _PrevColorCurrent.Load(newPos);
        #endif
        
        if (cameraPos.z > (0.1 - _FarPlane) && currCameraPos.z > newCameraPos.z && reducedWeight > currCol.w)
        {
            prevCol = float4(prevCol.rgb / prevCol.w * reducedWeight, reducedWeight);
            float depthWeighted = (_FarPlane + newCameraPos.z) * reducedWeight;
            _PrevColorCurrent[newPos] = prevCol;
            newCameraPos.z = -newCameraPos.z;
            _PrevPosCurrent[newPos] = float4(newCameraPos.xyz, depthWeighted);
        }
    }
}


#pragma kernel CopyFrame

Texture2D<float4> _CopyFrameInputColor;
Texture2D<float4> _CopyFrameInputPos;
RWTexture2D<float4> _CopyFrameOutputColor;
RWTexture2D<float4> _CopyFrameOutputPos;

[numthreads(8, 8, 1)]
void CopyFrame(uint3 id : SV_DispatchThreadID)
{
    int w, h;
    _CopyFrameOutputColor.GetDimensions(w, h);

    int2 input = min(id.xy, uint2(w - 1, h - 1));

    float4 color = _CopyFrameInputColor.Load(uint3(input, 0));
    float4 pos = _CopyFrameInputPos.Load(uint3(input, 0));

    _CopyFrameOutputColor[input] = color;
    _CopyFrameOutputPos[input] = pos;
}


#pragma kernel PullKernel

#ifdef SHADER_API_VULKAN
Texture2D<float4> _PullColorInput;
Texture2D<float4> _PullDepthBufferInput;
#else
RWTexture2D<float4> _PullColorInput;
RWTexture2D<float4> _PullDepthBufferInput;
#endif

RWTexture2D<float4> _PullColorOutput;
RWTexture2D<float4> _PullDepthBufferOutput;

int _PullInputLevel;
bool _PullSkipWeightMul = false;
float _PullFilterParam = 4;

[numthreads(8, 8, 1)]
void PullKernel(uint3 id : SV_DispatchThreadID)
{
    // Weights must add up to 1
    float4 weights = float4(0.25, 0.25, 0.25, 0.25);
    // float4 weights = float4(0.375, 0.125, 0.125, 0.375);

    uint3 sampleA = uint3(id.xy * 2, _PullInputLevel);
    uint3 sampleB = uint3(id.xy * 2 + uint2(0, 1), _PullInputLevel);
    uint3 sampleC = uint3(id.xy * 2 + uint2(1, 0), _PullInputLevel);
    uint3 sampleD = uint3(id.xy * 2 + uint2(1, 1), _PullInputLevel);

    float4 a = weights.r * _PullColorInput.Load(sampleA);
    float4 b = weights.g * _PullColorInput.Load(sampleB);
    float4 c = weights.b * _PullColorInput.Load(sampleC);
    float4 d = weights.w * _PullColorInput.Load(sampleD);

    float na = weights.r * _PullDepthBufferInput.Load(sampleA).w;
    float nb = weights.g * _PullDepthBufferInput.Load(sampleB).w;
    float nc = weights.b * _PullDepthBufferInput.Load(sampleC).w;
    float nd = weights.w * _PullDepthBufferInput.Load(sampleD).w;

    float wn = a.w + b.w + c.w + d.w;
    float wwn = 1 - pow(abs(1 - wn), _PullFilterParam);

    float4 col = float4(0, 0, 0, 0);
    float depth = 0;

    if (wn != 0)
    {
        float3 sum = a.rgb + b.rgb + c.rgb + d.rgb;
        float dsum = na + nb + nc + nd;
        float w = (_PullSkipWeightMul ? 1 : wwn) / wn;
        col = float4(w * sum, wwn);
        depth = w * dsum;
    }

    _PullColorOutput[id.xy] = col;
    _PullDepthBufferOutput[id.xy] = float4(0, 0, 0, depth);
}


#pragma kernel PushKernel

 int _PushInputLevel;

#ifdef SHADER_API_VULKAN
Texture2D<float4> _PushColorInput;
Texture2D<float4> _PushDepthBufferInput;
#else
RWTexture2D<float4> _PushColorInput;
RWTexture2D<float4> _PushDepthBufferInput;
#endif

RWTexture2D<float4> _PushColorOutput;
RWTexture2D<float4> _PushDepthBufferOutput;

[numthreads(8, 8, 1)]
void PushKernel(uint3 id : SV_DispatchThreadID)
{
    int2 xy2 = id.xy / 2;
    int2 mod2 = id.xy % 2;
    int3 offset = int3(mod2 * 2 - int2(1, 1), 0);

    float4 x = _PushColorOutput.Load(id.xy);
    float4 n = _PushDepthBufferOutput.Load(id.xy);

    // Weights must add up to 1
    float4 weights = float4(0.25, 0.25, 0.25, 0.25);
    // float4 weights = float4(0.375, 0.125, 0.125, 0.375);

    int3 sampleA = int3(xy2 + offset.zz, _PushInputLevel);
    int3 sampleB = int3(xy2 + offset.zy, _PushInputLevel);
    int3 sampleC = int3(xy2 + offset.xz, _PushInputLevel);
    int3 sampleD = int3(xy2 + offset.xy, _PushInputLevel);

    float4 a = weights.r * _PushColorInput.Load(sampleA);
    float4 b = weights.g * _PushColorInput.Load(sampleB);
    float4 c = weights.b * _PushColorInput.Load(sampleC);
    float4 d = weights.w * _PushColorInput.Load(sampleD);

    float na = weights.r * _PushDepthBufferInput.Load(sampleA).w;
    float nb = weights.g * _PushDepthBufferInput.Load(sampleB).w;
    float nc = weights.b * _PushDepthBufferInput.Load(sampleC).w;
    float nd = weights.w * _PushDepthBufferInput.Load(sampleD).w;

    float3 ni = a.rgb + b.rgb + c.rgb + d.rgb;
    float di = na + nb + nc + nd;

    float3 xn = ni * (1 - x.w) + x.rgb;
    float dn = di * (1 - x.w) + n.w;
    n.w = dn;

    _PushColorOutput[id.xy] = float4(xn, x.w);
    _PushDepthBufferOutput[id.xy] = n;
}


#pragma kernel CalculateNormals

#ifdef SHADER_API_VULKAN
int _CalcNormalsInputLevel;
Texture2D<float4> _NormalsIn;
RWTexture2D<float4> _NormalsOut;
#else
RWTexture2D<float4> _NormalsInOut;
#endif

[numthreads(8, 8, 1)]
void CalculateNormals(uint3 id : SV_DispatchThreadID)
{
    uint w, h;
    #ifdef SHADER_API_VULKAN
        _NormalsIn.GetDimensions(w, h);
        float dc = _NormalsIn.Load(int3(id.xy, _CalcNormalsInputLevel)).w;
        float du = _NormalsIn.Load(int3(id.xy + uint2(0, 1), _CalcNormalsInputLevel)).w;
        float dd = _NormalsIn.Load(int3(id.xy + uint2(0, -1), _CalcNormalsInputLevel)).w;
        float dr = _NormalsIn.Load(int3(id.xy + uint2(1, 0), _CalcNormalsInputLevel)).w;
        float dl = _NormalsIn.Load(int3(id.xy + uint2(-1, 0), _CalcNormalsInputLevel)).w;
    #else
        _NormalsInOut.GetDimensions(w, h);
        float dc = _NormalsInOut.Load(id.xy).w;
        float du = _NormalsInOut.Load(id.xy + uint2(0, 1)).w;
        float dd = _NormalsInOut.Load(id.xy + uint2(0, -1)).w;
        float dr = _NormalsInOut.Load(id.xy + uint2(1, 0)).w;
        float dl = _NormalsInOut.Load(id.xy + uint2(-1, 0)).w;
    #endif

    float xyStep = 1.0f / h;

    float3 xVec, yVec;
    if (abs(du - dc) < abs(dd - dc))
#if UNITY_UV_STARTS_AT_TOP
        yVec = float3(0, xyStep, dd - dc);
#else
        yVec = float3(0, xyStep, dc - dd);
#endif
    else
#if UNITY_UV_STARTS_AT_TOP
        yVec = float3(0, xyStep, dc - du);
#else
        yVec = float3(0, xyStep, du - dc);
#endif

    if (abs(dr - dc) < abs(dl - dc))
        xVec = float3(xyStep, 0, dc - dl);
    else
        xVec = float3(xyStep, 0, dr - dc);

    float3 nVec = normalize(cross(xVec, yVec));// * 0.5 + 0.5;
    #if SHADER_API_VULKAN
        _NormalsOut[id.xy] = float4(nVec, dc);
    #else
        _NormalsInOut[id.xy] = float4(nVec, dc);
    #endif
}


#pragma kernel SmoothNormals
#pragma kernel SmoothNormalsDebug DEBUG_CASCADES

Texture2D<float4> _SmoothNormalsIn;
RWTexture2D<float4> _SmoothNormalsOut;
RWTexture2D<float4> _SmoothNormalsColorDebug;

float _SmoothNormalsCascadesOffset;
float _SmoothNormalsCascadesSize;

SamplerState sampler_SmoothNormalsIn
{
    Filter   = MIN_MAG_MIP_LINEAR;
    AddressU = Clamp;
    AddressV = Clamp;
};

void SmoothNormalsImpl(uint3 id)
{
    uint w, h;
    _SmoothNormalsIn.GetDimensions(w, h);

    float4 inSample = _SmoothNormalsIn.Load(int3(id.xy, 0));
    float z = _FarPlane - inSample.w;
    float level = (log2(_SmoothNormalsCascadesOffset / z) / _SmoothNormalsCascadesSize);
    uint lowLevel = max(0, (uint) level);
    uint highLevel = min(level + 1, _RemoveHiddenLevelCount - 1);

    float2 coord;
	coord.x = (float)id.x / w;
	coord.y = (float)id.y / h;

    float4 lowSample = _SmoothNormalsIn.SampleLevel(sampler_SmoothNormalsIn, coord, lowLevel);
    float4 highSample = _SmoothNormalsIn.SampleLevel(sampler_SmoothNormalsIn, coord, highLevel);

    float3 vec = lerp(lowSample.xyz, highSample.xyz, frac(level));

    _SmoothNormalsOut[id.xy] = float4(normalize(vec) * 0.5 + 0.5, inSample.w);

#if DEBUG_CASCADES
    float4 col = _SmoothNormalsColorDebug.Load(id.xy);
    float ratio = level / (_RemoveHiddenLevelCount - 1);
    float3 debugColor = lerp(float3(0, 0, 1), float3(0, 1, 0), ratio);
    col.rgb = lerp(col.rgb * debugColor, debugColor, 0.5);
    _SmoothNormalsColorDebug[id.xy] = col;
#endif
}

[numthreads(8, 8, 1)]
void SmoothNormals(uint3 id : SV_DispatchThreadID)
{
    SmoothNormalsImpl(id);
}

[numthreads(8, 8, 1)]
void SmoothNormalsDebug(uint3 id : SV_DispatchThreadID)
{
    SmoothNormalsImpl(id);
}