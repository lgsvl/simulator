//

pipeline {

  agent {
    node {
      label "unity3d"
      customWorkspace "/home/jenkins/workspace/simulator"
    }
  }

  options {
    gitLabConnection("${GITLAB_HOST}")
    skipDefaultCheckout(true)
    buildDiscarder(logRotator(numToKeepStr: '20'))
    timestamps()
  }

  triggers {
    gitlab(triggerOnPush: true, triggerOnMergeRequest: true)
  }

  parameters {
    booleanParam(name: "BUILD_WINDOWS", defaultValue: true, description: "")
    booleanParam(name: "BUILD_LINUX", defaultValue: true, description: "")
    booleanParam(name: "BUILD_MACOS", defaultValue: false, description: "")
    string(name: "CLOUD_URL", defaultValue: "${SIMULATOR_STAGING_CLOUD_URL}", description: "")
  }

  environment {
    UNITY_USERNAME = credentials("UNITY_USERNAME")
    UNITY_PASSWORD = credentials("UNITY_PASSWORD")
    UNITY_SERIAL = credentials("UNITY_SERIAL")
    CODE_SIGNING_PASSWORD = credentials("LGSVL_CODE_SIGNING_PASSWORD")
    PYTHONUNBUFFERED = "1"
    DISPLAY = ":0"
    JENKINS_BUILD_ID = "${BUILD_ID}"
    GIT_BRANCH = "${BRANCH_NAME}"
    CODE_SIGNING_FILE = "/dev/urandom"
  }

  stages {

    stage("Git") {
      steps {

        checkout([
          $class: "GitSCM",
          branches: [[name: env.BRANCH_NAME]],
          browser: [$class: "GitLab", repoUrl: "https://${GITLAB_HOST}/HDRP/Simulator", version: env.GITLAB_VERSION],
          extensions: [
            [$class: "LocalBranch"],
            [$class: "GitLFSPull"]
          ],
          userRemoteConfigs: [[
            credentialsId: "auto-gitlab",
            url: "git@${GITLAB_HOST}:HDRP/Simulator.git"
          ]]
        ])

        script {

          def environments = env.SIMULATOR_ENVIRONMENTS.split(',')
          for (int i=0; i<environments.size(); i++) {
            def environment = environments[i]
            checkout([
              $class: "GitSCM",
              branches: [[name: "refs/heads/master"]],
              browser: [$class: "GitLab", repoUrl: "https://${GITLAB_HOST}/HDRP/Environments/${environment}", version: env.GITLAB_VERSION],
              extensions: [
                [$class: "RelativeTargetDirectory", relativeTargetDir: "Assets/External/Environments/${environment}"],
                [$class: "LocalBranch"],
                [$class: "GitLFSPull"]
              ],
              userRemoteConfigs: [[
                credentialsId: "auto-gitlab",
                url: "git@${GITLAB_HOST}:HDRP/Environments/${environment}.git"
              ]]
            ])
          }

          def vehicles = env.SIMULATOR_VEHICLES.split(',')
          for (int i=0; i<vehicles.size(); i++) {
            def vehicle = vehicles[i]
            checkout([
              $class: "GitSCM",
              branches: [[name: "refs/heads/master"]],
              browser: [$class: "GitLab", repoUrl: "https://${GITLAB_HOST}/HDRP/Vehicles/${vehicle}", version: env.GITLAB_VERSION],
              extensions: [
                [$class: "RelativeTargetDirectory", relativeTargetDir: "Assets/External/Vehicles/${vehicle}"],
                [$class: "LocalBranch"],
                [$class: "GitLFSPull"]
              ],
              userRemoteConfigs: [[
                credentialsId: "auto-gitlab",
                url: "git@${GITLAB_HOST}:HDRP/Vehicles/${vehicle}.git"
              ]]
            ])
          }

          def controllables = env.SIMULATOR_CONTROLLABLES.split(',')
          for (int i=0; i<controllables.size(); i++) {
            def controllable = controllables[i]
            checkout([
              $class: "GitSCM",
              branches: [[name: "refs/heads/master"]],
              browser: [$class: "GitLab", repoUrl: "https://${GITLAB_HOST}/HDRP/Controllables/${controllable}", version: env.GITLAB_VERSION],
              extensions: [
                [$class: "RelativeTargetDirectory", relativeTargetDir: "Assets/External/Controllables/${controllable}"],
                [$class: "LocalBranch"],
                [$class: "GitLFSPull"]
              ],
              userRemoteConfigs: [[
                credentialsId: "auto-gitlab",
                url: "git@${GITLAB_HOST}:HDRP/Controllables/${controllable}.git"
              ]]
            ])
          }


          env.FORCE_REBUILD = "0"
          env.GIT_COMMIT = sh(returnStdout: true, script: "git rev-parse HEAD").trim()
          env.SIM_ENVIRONMENTS = sh(returnStdout: true, script: "./Jenkins/get-assets.sh Assets/External/Environments ${S3_DOWNLOAD_HOST} environment 1").trim()
          env.SIM_VEHICLES = sh(returnStdout: true, script: "./Jenkins/get-assets.sh Assets/External/Vehicles ${S3_DOWNLOAD_HOST} vehicle 1").trim()
        } // script

        sh "rm -rf *.zip *.html *.xml"
      }
    }

    stage("Docker") {
      environment {
        DOCKER = credentials("Jenkins-Gitlab")
      }
      steps {
        dir("Jenkins") {
          sh """
            docker login -u ${DOCKER_USR} -p ${DOCKER_PSW} ${GITLAB_HOST}:4567
            docker-compose build build-simulator
            docker-compose push build-simulator
            docker-compose pull build-webui
          """
        }
      }
    }

    stage("WebUI") {
      steps {
        dir("Jenkins") {
          sh "UID=`id -u` docker-compose run --rm build-webui"
        }
      }
    }

    stage("Check") {
      steps {
        dir("Jenkins") {
          sh "UID=`id -u` docker-compose run --rm build-simulator check"
        }
      }
      post {
        success {
          archiveArtifacts "*-check-${GIT_BRANCH}-${JENKINS_BUILD_ID}.html"
        }
      }
    }

    stage("Test") {
      steps {
        dir("Jenkins") {
          sh "UID=`id -u` docker-compose run --rm build-simulator test"
        }
      }
      post {
        success {
          xunit([NUnit3(pattern: "*-test-${GIT_BRANCH}-${JENKINS_BUILD_ID}.xml", deleteOutputFiles: true)])
        }
      }
    }

    stage("Windows") {
      when {
        environment name: "BUILD_WINDOWS", value: "true"
      }

      steps {
        dir("Jenkins") {
          withCredentials([file(credentialsId: "LGSVL_CODE_SIGNING_FILE", variable: "CODE_SIGNING_FILE")]) {
            sh "UID=`id -u` docker-compose run --rm build-simulator windows"
          }
        }
      }

      post {
        success {
          archiveArtifacts "*-windows64-${GIT_BRANCH}-${JENKINS_BUILD_ID}.zip"
        }
      }

    } // Windows

    stage("Linux") {
      when {
        environment name: "BUILD_LINUX", value: "true"
      }

      steps {
        dir("Jenkins") {
          sh "UID=`id -u` docker-compose run --rm build-simulator linux"
        }
      }

      post {
        success {
          archiveArtifacts "*-linux64-${GIT_BRANCH}-${JENKINS_BUILD_ID}.zip"
        }
      }

    } // Linux

    stage("macOS") {
      when {
        environment name: "BUILD_MACOS", value: "true"
      }

      steps {
        dir("Jenkins") {
          sh "UID=`id -u` docker-compose run --rm build-simulator macos"
        }
      }

      post {
        success {
          archiveArtifacts "*-macOS-${GIT_BRANCH}-${JENKINS_BUILD_ID}.zip"
        }
      }

    } // macOS

    stage("Bundles") {
      steps {
        dir("Jenkins") {
          sh "UID=`id -u` docker-compose run --rm save-bundle-links"
        }
      }

      post {
        success {
          archiveArtifacts "*-bundles-${JENKINS_BUILD_ID}.html"
        }
      }
    } // Bundles

  } // stages

  post {
    failure {
      updateGitlabCommitStatus state: "failed"
    }
    success {
      updateGitlabCommitStatus state: "success"
    }
  }

}
